############################################################
#                org.apache.log4j 配置文件
############################################################
# RootLogger 顶级父元素的配置信息
# 指定日志级别为 trace，使用的 appender 为 console。
# file,rollingFile,dailyRollingFile
log4j.rootLogger=trace,console
# 自定义 logger
log4j.logger.com.sunchaser=info,file
log4j.logger.org.apache=error
# 配置输出到控制台的 ConsoleAppender 对象
log4j.appender.console=org.apache.log4j.ConsoleAppender
# 指定日志输出格式 layout
log4j.appender.console.layout=org.apache.log4j.PatternLayout
# 指定消息输出格式内容
log4j.appender.console.layout.conversionPattern=[%5p]%r %l %d{yyyy-MM-dd HH:mm:ss} - %m%n
# PatternLayout 采用类似 c 语言 printf 函数的打印格式格式化日志信息，具体地占位符及含义如下：
#
# %m：输出代码中打印的日志信息
# %p：输出日志级别
# %n：输出换行符
# %r：输出自应用启动到输出该日志信息消耗的毫秒数
# %c：输出日志语句所属的类的全限定类名
# %t：输出产生该日志的线程名
# %d：输出服务器当前时间，默认 ISO8601，也可指定格式，例如 %d{yyyy-MM-dd HH:mm:ss}。
# %l：输出日志产生的位置，包括类名、方法名及所在的代码行数。
# %F：输出日志产生时所在的文件名称
# %L：输出代码中的行号
# %%：输出一个 "%" 符号
#
# %c %t %F %L ==> %l
#
# 还可以在 % 和字符之间加上修饰符来控制最小宽度、最大宽度和文本对齐方式。例如：
# %5p：输出日志级别，最小宽度为 5，右对齐。
# %-5p：输出日志级别，最小宽度为 5，"-" 号表示左对齐。
# %.5p：输出日志级别，最大宽度为 5，大于 5 后会将左边多出的字符截取掉。
# 配置输出到文件的 FileAppender 对象
log4j.appender.file=org.apache.log4j.FileAppender
# 指定日志输出格式 layout
log4j.appender.file.layout=org.apache.log4j.PatternLayout
# 指定消息输出格式内容
log4j.appender.file.layout.conversionPattern=[%5p]%r %l %d{yyyy-MM-dd HH:mm:ss} - %m%n
# 指定日志文件路径
log4j.appender.file.file=logs/log4j.log
# 指定日志文件字符集
log4j.appender.file.encoding=UTF-8
# 配置按照文件大小拆分的 RollingFileAppender 对象
log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender
# 指定日志输出格式 layout
log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout
# 指定消息输出格式内容
log4j.appender.rollingFile.layout.conversionPattern=[%5p]%r %l %d{yyyy-MM-dd HH:mm:ss} - %m%n
# 指定日志文件路径
log4j.appender.rollingFile.file=logs/log4j.log
# 指定日志文件字符集
log4j.appender.rollingFile.encoding=UTF-8
# 指定日志文件大小
log4j.appender.rollingFile.maxFileSize=1MB
# 指定日志文件数量
log4j.appender.rollingFile.maxBackupIndex=10
# 配置按照时间规则拆分的 DailyRollingFileAppender 对象
log4j.appender.dailyRollingFile=org.apache.log4j.DailyRollingFileAppender
# 指定日志输出格式 layout
log4j.appender.dailyRollingFile.layout=org.apache.log4j.PatternLayout
# 指定消息输出格式内容
log4j.appender.dailyRollingFile.layout.conversionPattern=[%5p]%r %l %d{yyyy-MM-dd HH:mm:ss} - %m%n
# 指定日志文件路径
log4j.appender.dailyRollingFile.file=logs/log4j.log
# 指定日志文件字符集
log4j.appender.dailyRollingFile.encoding=UTF-8
# 指定日期拆分规则。默认为 '.'yyyy-MM-dd 按日进行拆分
log4j.appender.dailyRollingFile.datePattern='.'yyyy-MM-dd
# 配置保存至数据库的 JDBCAppender 对象
log4j.appender.jdbc=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.jdbc.layout=org.apache.log4j.PatternLayout
log4j.appender.jdbc.driver=com.mysql.cj.jdbc.Driver
log4j.appender.jdbc.URL=jdbc:mysql://127.0.0.1:3306/logs
log4j.appender.jdbc.user=root
log4j.appender.jdbc.password=root
log4j.appender.jdbc.sql=insert into log(app_id, create_time, level, logger_name, file_name, thread_name, line, all_info, log_message) values ("sunchaser", '%d{yyyy-MM-dd HH:mm:ss}', '%p', '%c', '%F', '%t', '%L', '%l', '%m')
# 建表语句
# create table `log` (
#     `id` bigint(11) not null auto_increment,
#     `app_id` varchar(128) not null comment '项目标识',
#     `create_time` datetime not null comment '创建时间',
#     `level` varchar(5) not null comment '日志级别,
#     `logger_name` varchar(128) not null comment '所在类的全限定类名'
#     `file_name` varchar(128) not null comment '日志产生时所在的文件名称',
#     `thread_name` varchar(128) not null comment '产生该日志的线程名',
#     `line` varchar(12) not null comment '行号',
#     `all_info` varchar(256) not null comment '日志产生的位置，包括类名、方法名及所在的代码行数',
#     `log_message` blog not null comment '代码中打印的日志信息',
#     primary key (`id`)
# );
